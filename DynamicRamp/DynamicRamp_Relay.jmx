<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TP_10_DynamicRamp_V3" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <stringProp name="TestPlan.comments"></stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="10.193.71.250:1099-TG2" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="false">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1_1_Postman_POSTAPI" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${pRequestBodyPart1}&#xd;
${pRequestBodyPart2}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">https://postman-echo.com/post</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="via" elementType="Header">
                <stringProp name="Header.name">via</stringProp>
                <stringProp name="Header.value">1.1 akamai.net(ghost) (AkamaiGHost)</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="ManageUsers" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">var threadGroupName = java.lang.Thread.currentThread().getName().split(&quot; &quot;)[0];//.split(&quot;-&quot;)[1];
var flagName = &quot;cwho_&quot; + threadGroupName;

if (props.get(flagName) == null ) {
	props.put(flagName, &quot;done&quot;); 
	props.put(threadGroupName,ctx.getThreadGroup().getNumberOfThreads());
}
var updatedUserCount = parseInt(props.get(threadGroupName));
//log.warn(&quot;InitalCondition &quot; + (updatedUserCount !== null) + (updatedUserCount &gt; 0) + (props.get(flagName).indexOf(&quot;true&quot;) == 0) +
//    (props.get(flagName).indexOf(threadGroupName) !== 0) + (updatedUserCount != ctx.getThreadGroup().getNumberOfThreads()));
//log.warn(&quot;CurrentFlagValueInTG2 &quot;+java.lang.Thread.currentThread().getName()+&quot;-&quot; + props.get(flagName));

if (updatedUserCount !== null &amp;&amp; updatedUserCount &gt; 0 &amp;&amp; props.get(flagName).indexOf(&quot;true&quot;) == 0 &amp;&amp;
    (props.get(flagName).indexOf(threadGroupName) !== 0) &amp;&amp; updatedUserCount != ctx.getThreadGroup().getNumberOfThreads()) {

	if(updatedUserCount == parseInt(ctx.getThreadGroup().getNumberOfThreads()))
		props.put(flagName, &quot;done&quot;);

		
    var threadName = java.lang.Thread.currentThread().getName();
    generateRandomWaitTime();

    if (props.get(flagName).indexOf(&quot;true&quot;) == 0) {
        log.warn(&quot;AfterWait &quot; + threadName);

        props.put(flagName, threadName);

        if (updatedUserCount &gt; ctx.getThreadGroup().getNumberOfThreads()) {
            var addCount = updatedUserCount - ctx.getThreadGroup().getNumberOfThreads();
            handleThreadAddition(addCount, updatedUserCount);

        } else if (updatedUserCount &lt; ctx.getThreadGroup().getNumberOfThreads()) {
            var stopCount = ctx.getThreadGroup().getNumThreads() - updatedUserCount;
            stopThreads(stopCount, updatedUserCount);
        } 
        }
        else {
            log.info(&quot;Unreachable code --- HOW did you get here--happens only during concurrency&quot;);
        }
    
}


function generateRandomWaitTime() {
    var randNumber = Math.random() * 100;
    var minWaitTimeMillis, maxWaitTimeMillis;

    if (randNumber &lt; 1) {
        log.warn(&quot;Setting Min Random Wait: &quot; + java.lang.Thread.currentThread().getName());
        minWaitTimeMillis = 0;
        maxWaitTimeMillis = 500;
    } else if (randNumber &lt; 5) {
        minWaitTimeMillis = 1000;
        maxWaitTimeMillis = 5000;
    } else {
        minWaitTimeMillis = 5000;
        maxWaitTimeMillis = 10000;
    }

    var randomWaitMillis = Math.floor(Math.random() * (maxWaitTimeMillis - minWaitTimeMillis + 1)) + minWaitTimeMillis;
    java.lang.Thread.sleep(randomWaitMillis);

    return true;
}

// Define a function to handle the logic for adding threads
function handleThreadAddition(userCountToAdd, updatedUserCount) {
    var completedTime = parseInt(Date.now()) - parseInt(&quot;${TESTSTART.MS}&quot;);
    var durationName = &quot;actDuration_&quot; + java.lang.Thread.currentThread().getName().split(&quot; &quot;)[0];
    var rampupName = &quot;rampup_&quot; + java.lang.Thread.currentThread().getName().split(&quot; &quot;)[0];

    if (props.get(durationName) != null) {
        ctx.getThreadGroup().setDuration(parseInt(props.get(durationName)) - Math.floor(completedTime / 1000));
    } else {
        props.put(durationName, ctx.getThreadGroup().getDuration());
        ctx.getThreadGroup().setDuration(ctx.getThreadGroup().getDuration() - Math.floor(completedTime / 1000));
    }

 
    

    var flagName = &quot;cwho_&quot; + java.lang.Thread.currentThread().getName().split(&quot; &quot;)[0];

	log.warn(props.get(flagName) + &quot; ADDING by &quot; + java.lang.Thread.currentThread().getName());
	

    if (props.get(flagName).indexOf(java.lang.Thread.currentThread().getName()) !== 0) return;
    var rampup = Math.floor((props.get(rampupName) / userCountToAdd) * 1000);

    log.warn(props.get(flagName) + &quot; ADDING by &quot; + java.lang.Thread.currentThread().getName() + &quot; With ramp-up &quot; + rampup);
    
    for (var i = 0; (i &lt; userCountToAdd &amp;&amp; updatedUserCount &gt; ctx.getThreadGroup().getNumberOfThreads()); i++) {
        ctx.getThreadGroup().addNewThread(1000, ctx.getEngine());
        java.lang.Thread.sleep(rampup);
    }
    java.lang.Thread.sleep(2000);
    if ((updatedUserCount &lt;= parseInt(ctx.getThreadGroup().getNumberOfThreads()))) props.put(flagName, &quot;done&quot;);
}

// Define a function to stop threads based on a specific condition

function stopThreads(userCountToStop, updatedUserCount) {
    var firstRunningThread = 1;
    var flagName = &quot;cwho_&quot; + java.lang.Thread.currentThread().getName().split(&quot; &quot;)[0];
    log.warn(props.get(flagName) + &quot; STOP by &quot; + java.lang.Thread.currentThread().getName());
    if (props.get(flagName).indexOf(java.lang.Thread.currentThread().getName()) !== 0) return;
	  log.warn(props.get(flagName) + &quot; Stop by &quot; + java.lang.Thread.currentThread().getName());
    for (var i = firstRunningThread; i &lt;= userCountToStop; i++) {
    	log.warn(&quot;StopThreadName:&quot;+java.lang.Thread.currentThread().getName().split(&quot;-&quot;)[0]+&quot;-&quot;+java.lang.Thread.currentThread().getName().split(&quot;-&quot;)[1] + &quot;-&quot; + i)
        ctx.getThreadGroup().stopThread(java.lang.Thread.currentThread().getName().split(&quot;-&quot;)[0]+&quot;-&quot;+java.lang.Thread.currentThread().getName().split(&quot;-&quot;)[1] + &quot;-&quot; + i, false);
    }
    java.lang.Thread.sleep(20000);

    if (updatedUserCount + 1 &gt;= parseInt(ctx.getThreadGroup().getNumberOfThreads())) {
        props.put(flagName, &quot;done&quot;);
    }
}

// End of File</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
            <collectionProp name="Arguments.arguments">
              <elementProp name="ip" elementType="Argument">
                <stringProp name="Argument.name">ip</stringProp>
                <stringProp name="Argument.value">${__machineIP()}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User defined test data" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="pRequestBodyPart2" elementType="Argument">
              <stringProp name="Argument.name">pRequestBodyPart2</stringProp>
              <stringProp name="Argument.value">${__machineIP()}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pRequestBodyPart1" elementType="Argument">
              <stringProp name="Argument.name">pRequestBodyPart1</stringProp>
              <stringProp name="Argument.value">${__property(cAccessTokenInPerflab,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="mock" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="false">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2_1_MockEP" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">https://64351808537112453fcd559b.mockapi.io/api/v1/users</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="via" elementType="Header">
                <stringProp name="Header.name">via</stringProp>
                <stringProp name="Header.value">1.1 akamai.net(ghost) (AkamaiGHost)</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="getFlag" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">var jsonResponse = prev.getResponseDataAsString();
var jsonArray = JSON.parse(jsonResponse);
//x=${__machineIP()}+&quot;&quot;
var adjustName = vars.get(&quot;pRequestBodyPart2&quot;)+&quot;:1099-&quot;;
for (var i = 0; i &lt; jsonArray.length; i++) {
  	flagName = &quot;cwho_&quot;+adjustName+jsonArray[i].name; 

	if (props.get(flagName) == null) 
  	{
  		props.put(flagName, &quot;done&quot;);
  		props.put(jsonArray[i].name,0);
  	}

	log.warn(&quot;CurrentFlagValue &quot; + props.get(flagName));
  	if ((props.get(adjustName+jsonArray[i].name)!=jsonArray[i].usercount &amp;&amp; (props.get(flagName).indexOf(&quot;done&quot;)!==-1 ) &amp;&amp; jsonArray[i].usercount&gt;0))
  	{
		props.put(flagName,&quot;true&quot;);
  		props.put(adjustName+jsonArray[i].name,jsonArray[i].usercount);
  		props.put(&quot;rampup_&quot;+adjustName+jsonArray[i].name,jsonArray[i].rampup);
  	}
  	
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">props.clear()</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
